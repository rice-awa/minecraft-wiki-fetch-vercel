# ================================
# Minecraft Wiki API 环境变量配置
# ================================

# ----------------
# 服务器基础配置
# ----------------
# 服务器监听端口号，范围：1-65535
# 默认：3000，生产环境建议使用80（HTTP）或443（HTTPS）
PORT=3000

# 运行环境模式
# 可选值：development（开发）、production（生产）、test（测试）
# 影响日志级别、错误信息显示、性能优化等
NODE_ENV=development

# 服务器监听的IP地址
# 0.0.0.0 表示监听所有网络接口，127.0.0.1 表示仅监听本地
# 生产环境建议使用具体的内网IP地址
HOST=0.0.0.0

# ----------------
# 自动端口管理
# ----------------
# 是否启用自动端口选择功能
# true：当指定端口被占用时自动寻找可用端口
# false：端口被占用时直接退出程序
AUTO_PORT=true

# 自动端口选择时的最大尝试次数
# 防止无限循环，建议设置为50-200之间
MAX_PORT_ATTEMPTS=100

# ----------------
# Wiki数据源配置
# ----------------
# Minecraft Wiki的基础URL地址
# 默认使用中文Wiki，也可以设置为其他语言版本
WIKI_BASE_URL=https://zh.minecraft.wiki

# HTTP请求超时时间（毫秒）
# 建议设置为5000-30000毫秒，太小可能导致请求失败
# 生产环境建议设置为15000-20000毫秒
REQUEST_TIMEOUT=10000

# HTTP请求最大重试次数
# 网络不稳定时的重试机制，建议设置为2-5次
MAX_RETRIES=3

# HTTP请求的User-Agent标识
# 用于标识API客户端，建议包含项目名称和版本号
USER_AGENT=MinecraftWikiAPI/1.0.0 (https://github.com/rice-awa/mc-wiki-fetch)

# ----------------
# 缓存系统配置
# ----------------
# Redis数据库连接URL
# 格式：redis://用户名:密码@主机:端口/数据库编号
# 生产环境建议使用密码保护的Redis实例
REDIS_URL=redis://localhost:6379

# 默认缓存过期时间（秒）
# 1800秒 = 30分钟，根据数据更新频率调整
CACHE_TTL=1800

# 内存缓存最大条目数量
# 防止内存无限增长，建议根据服务器内存设置
MEMORY_CACHE_MAX_SIZE=1000

# 搜索结果缓存过期时间（秒）
# 搜索结果变化频率较高，建议设置较短时间
SEARCH_CACHE_TTL=300

# 页面内容缓存过期时间（秒）
# 页面内容相对稳定，可以设置较长时间
PAGE_CACHE_TTL=1800

# ----------------
# 访问限流配置
# ----------------
# 限流时间窗口（毫秒）
# 60000毫秒 = 1分钟，可根据需要调整为其他时间段
RATE_LIMIT_WINDOW=60000

# 时间窗口内允许的最大请求数
# 开发环境：10-50，生产环境：100-1000，根据服务器性能调整
RATE_LIMIT_MAX=100

# 是否启用基于IP的限流
# true：每个IP独立计算限流，false：全局限流
RATE_LIMIT_BY_IP=true

# 限流存储方式
# memory：内存存储（单机），redis：Redis存储（分布式）
RATE_LIMIT_STORE=memory

# ----------------
# 日志系统配置
# ----------------
# 日志记录级别
# error：仅错误，warn：警告+错误，info：信息+警告+错误，debug：全部
LOG_LEVEL=info

# 日志文件存储目录
# 相对于项目根目录的路径，确保目录存在且有写入权限
LOG_DIR=logs

# 是否启用控制台日志输出
# 开发环境建议true，生产环境可设为false以提高性能
LOG_CONSOLE=true

# 是否启用文件日志输出
# 生产环境建议true，用于问题排查和监控
LOG_FILE=true

# 单个日志文件最大大小（MB）
# 超过此大小会自动轮转，建议设置为10-100MB
LOG_MAX_SIZE=50

# 保留的日志文件数量
# 防止日志文件过多占用磁盘空间
LOG_MAX_FILES=30

# ----------------
# 搜索功能配置
# ----------------
# 搜索结果默认返回数量
# 用户未指定limit参数时的默认值
SEARCH_DEFAULT_LIMIT=10

# 搜索结果最大返回数量
# 防止单次请求返回过多数据影响性能
SEARCH_MAX_LIMIT=50

# 搜索关键词最大长度（字符）
# 防止恶意的超长搜索词
SEARCH_MAX_KEYWORD_LENGTH=200

# ----------------
# 安全配置
# ----------------
# 允许的跨域来源
# *表示允许所有来源，生产环境建议设置具体域名
# 多个域名用逗号分隔：https://example.com,https://app.example.com
ALLOWED_ORIGINS=*

# 是否启用HTTPS重定向
# 生产环境建议启用，开发环境设为false
FORCE_HTTPS=false

# 是否启用安全头部
# 包括CSP、HSTS等安全相关的HTTP头部
SECURITY_HEADERS=true

# API密钥（可选）
# 如果设置，则所有API请求需要提供此密钥
# API_KEY=your-secret-api-key-here

# JWT密钥（如果启用认证功能）
# 用于签名和验证JWT token，必须是强密码
# JWT_SECRET=your-jwt-secret-key-here

# ----------------
# 数据库配置（如果使用）
# ----------------
# 数据库连接URL
# 支持PostgreSQL、MySQL、SQLite等
# DATABASE_URL=postgresql://username:password@localhost:5432/minecraft_wiki_api

# 数据库连接池最大连接数
# DATABASE_POOL_MAX=20

# 数据库连接池最小连接数
# DATABASE_POOL_MIN=2

# ----------------
# 监控和健康检查
# ----------------
# 健康检查路径
# 用于负载均衡器和监控系统检查服务状态
HEALTH_CHECK_PATH=/health

# 是否启用详细的健康检查
# true：检查数据库、缓存等依赖服务，false：仅检查HTTP服务
HEALTH_CHECK_DETAILED=true

# Prometheus监控指标端点
# 如果启用，可在此路径获取监控指标
# METRICS_PATH=/metrics

# ----------------
# 性能优化配置
# ----------------
# 是否启用响应压缩
# true：自动压缩HTTP响应，减少带宽使用
ENABLE_COMPRESSION=true

# 静态资源缓存时间（秒）
# 0表示不缓存，86400秒=1天
STATIC_CACHE_TIME=86400

# 是否启用请求体大小限制
# HTTP请求体最大大小，防止过大请求占用资源
MAX_REQUEST_SIZE=10mb

# Node.js内存限制（MB）
# 防止内存泄漏导致系统崩溃，0表示不限制
# NODE_MEMORY_LIMIT=512

# ----------------
# 第三方服务配置
# ----------------
# 如果使用外部图片存储服务
# IMAGE_STORAGE_URL=https://your-image-cdn.com

# 如果使用外部分析服务
# ANALYTICS_API_KEY=your-analytics-key

# 如果使用邮件通知服务
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your-email@gmail.com
# SMTP_PASS=your-app-password

# ----------------
# 开发和调试配置
# ----------------
# 是否启用调试模式
# true：显示详细的调试信息，仅开发环境使用
DEBUG=false

# 是否启用API文档
# true：在/docs路径提供Swagger/OpenAPI文档
ENABLE_API_DOCS=true

# 是否启用性能分析
# true：记录API响应时间等性能指标
ENABLE_PROFILING=false